name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-southeast-1                        # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: c360                              # set this to your Amazon ECR repository name
  ECS_SERVICE: sample-app-service                   # set this to your Amazon ECS service name
  ECS_CLUSTER: default                              # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: first-run-task-definition:1  # set this to the path to your Amazon ECS task definition
                                                    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: sample-app                        # set this to the name of the container in the
                                                    # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: windows-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: AKIA2TRO5ZCMAXIIQNJB
        aws-secret-access-key: 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
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t public.ecr.aws/s4g6f1b8/c360:$IMAGE_TAG .
        docker build -t public.ecr.aws/s4g6f1b8/c360:latest .
        docker push --all-tags public.ecr.aws/s4g6f1b8/c360

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
